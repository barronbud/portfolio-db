generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider                 = "zod-prisma"
  output                   = "./zod"
  relationModel            = true
  modelCase                = "PascalCase"
  modelSuffix              = "Model"
  useDecimalJs             = false
  prismaJsonNullability    = true
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

// const CustomerSchema = oms_CustomerModel.schema.extend({
//     firstName: z.string().min(1, { message: "First name is required" }),
//     lastName: z.string().min(1, { message: "Last name is required" }),
//     email: z.string().email({ message: "Invalid email address" }),
//     phone: z.string().min(1, { message: "Phone number is required" }),
//     address: z.string().min(1, { message: "Address is required" }),
//     city: z.string().min(1, { message: "City is required" }),
//     state: z.string().min(1, { message: "State is required" }),
//     zip: z.string().min(1, { message: "Zip code is required" }).max(5, {
//         message: "Zip code must be 5 digits",
//     }),
// });

model oms_Customer {
  id        Int         @id @default(autoincrement())
  /// @zod.email
  email     String      @unique
  /// @zod.min(1, { message: "First name is required" })
  firstName String
  /// @zod.min(1, { message: "Last name is required" })
  lastName  String
  /// @zod.min(1, { message: "Password is required" })
  password  String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  /// @zod.min(1, { message: "Address is required" })
  address   String?
  /// @zod.min(1, { message: "City is required" })
  city      String?
  /// @zod.min(1, { message: "Phone number is required" })
  phone     String?
  /// @zod.min(1, { message: "State is required" })
  state     String?
  /// @zod.min(1, { message: "Zip code is required" }).max(5, {message: "Zip code must be 5 digits"})
  zip       String?
  orders    oms_Order[]
}

model oms_Product {
  id          Int             @id @default(autoincrement())
  name        String
  description String
  price       Decimal
  stock       Int
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  sku         String?
  orderItems  oms_OrderItem[]
}

model oms_Order {
  id         Int             @id @default(autoincrement())
  status     String
  total      Decimal         @default(0)
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  customerId Int
  shipping   Decimal         @default(0)
  tax        Decimal         @default(0)
  customer   oms_Customer    @relation(fields: [customerId], references: [id])
  orderItems oms_OrderItem[]
}

model oms_OrderItem {
  id        Int         @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Decimal
  order     oms_Order   @relation(fields: [orderId], references: [id])
  product   oms_Product @relation(fields: [productId], references: [id])
}
