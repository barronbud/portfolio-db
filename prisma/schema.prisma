generator client {
  provider = "prisma-client-js"
}

// generator zod {
//   provider                 = "zod-prisma"
//   output                   = "./zod"
//   relationModel            = true
//   modelCase                = "PascalCase"
//   modelSuffix              = "Model"
//   useDecimalJs             = false
//   prismaJsonNullability    = true
// }

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model oms_Customer {
  id        String         @id @default(cuid())
  email     String      @unique
  firstName String
  lastName  String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  address   String
  city      String
  phone     String
  state     String
  zip       String
  isActive  Boolean          @default(true)
  orders    oms_Order[]
}

model oms_Product {
  id          String             @id @default(cuid())
  name        String
  description String
  price       Int
  stock       Int
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  sku         String
  isActive    Boolean         @default(true)
  orderItems  oms_OrderItem[]
}

model oms_Order {
  id         String             @id @default(cuid())
  status     String
  total      Int              @default(0)
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  customerId String
  shipping   Int             @default(0)
  tax        Int             @default(0)
  customer   oms_Customer    @relation(fields: [customerId], references: [id])
  orderItems oms_OrderItem[]
}

model oms_OrderItem {
  id        String             @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Int
  order     oms_Order   @relation(fields: [orderId], references: [id])
  product   oms_Product @relation(fields: [productId], references: [id])
}

// ledger
model ledger_User {
  id        String             @id @default(cuid())
  email     String             @unique
  firstName String
  lastName  String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  transactions ledger_Transaction[]
}

model ledger_Transaction {
  id        String             @id @default(cuid())
  amount    Int
  date      DateTime
  merchantId String
  categoryId String
  userId     String
  merchant  ledger_Merchant @relation(fields: [merchantId], references: [id])
  category  ledger_Category @relation(fields: [categoryId], references: [id])
  user      ledger_User     @relation(fields: [userId], references: [id])
}

model ledger_Category {
  id        String             @id @default(cuid())
  name      String
  transactions ledger_Transaction[]
}

model ledger_Merchant {
  id        String             @id @default(cuid())
  name      String
  isFlagged Boolean            @default(false)
  transactions ledger_Transaction[]
}
