generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider                 = "zod-prisma"
  output                   = "./zod"
  relationModel            = true
  modelCase                = "PascalCase"
  modelSuffix              = "Model"
  useDecimalJs             = false
  prismaJsonNullability    = true
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model oms_Customer {
  /// @zod.optional()
  id        String         @id @default(cuid())
  /// @zod.min(1, { message: "Email is required" })
  /// @zod.email({ message: "Invalid email address" })
  email     String      @unique
  /// @zod.min(1, { message: "First name is required" })
  firstName String
  /// @zod.min(1, { message: "Last name is required" })
  lastName  String
  /// @zod.optional()
  createdAt DateTime    @default(now())
  /// @zod.optional()
  updatedAt DateTime    @updatedAt
  /// @zod.min(1, { message: "Address is required" })
  address   String
  /// @zod.min(1, { message: "City is required" })
  city      String
  /// @zod.min(1, { message: "Phone number is required" })
  phone     String
  /// @zod.min(1, { message: "State is required" })
  state     String
  /// @zod.min(1, { message: "Zip code is required" }).max(5, {message: "Zip code must be 5 digits"})
  zip       String
  orders    oms_Order[]
}

model oms_Product {
  /// @zod.optional()
  id          String             @id @default(cuid())
  /// @zod.min(1, { message: "Name is required" })
  name        String
  /// @zod.optional()
  description String
  /// @zod.positive({ message: "Price must be greater than 0" })
  price       Decimal
  /// @zod.int({ message: "Stock is required" }).positive({ message: "Stock must be greater than 0" })
  stock       Int
  /// @zod.optional()
  createdAt   DateTime        @default(now())
  /// @zod.optional()
  updatedAt   DateTime        @updatedAt
  /// @zod.optional()
  sku         String?
  orderItems  oms_OrderItem[]
}

model oms_Order {
  /// @zod.optional()
  id         String             @id @default(cuid())
  /// @zod.min(1, { message: "Status is required" })
  status     String
  /// @zod.positive({ message: "Total must be greater than 0" })
  total      Decimal         @default(0)
  /// @zod.optional()
  createdAt  DateTime        @default(now())
  /// @zod.optional()
  updatedAt  DateTime        @updatedAt
  /// @zod.min(1, { message: "Customer ID is required" })
  customerId String
  /// @zod.nonnegative({ message: "Shipping must be greater than or equal to 0" })
  shipping   Decimal         @default(0)
  /// @zod.nonnegative({ message: "Tax must be greater than or equal to 0" })
  tax        Decimal         @default(0)
  customer   oms_Customer    @relation(fields: [customerId], references: [id])
  orderItems oms_OrderItem[]
}

model oms_OrderItem {
  /// @zod.optional()
  id        String             @id @default(cuid())
  /// @zod.min(1, { message: "Order ID is required" })
  orderId   String
  /// @zod.min(1, { message: "Product ID is required" })
  productId String
  /// @zod.int({ message: "Quantity is required" }).positive({ message: "Quantity must be greater than 0" })
  quantity  Int
  /// @zod.positive({ message: "Price must be greater than 0" })
  price     Decimal
  order     oms_Order   @relation(fields: [orderId], references: [id])
  product   oms_Product @relation(fields: [productId], references: [id])
}
